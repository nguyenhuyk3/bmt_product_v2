// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: film.update.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const updatePosterUrlAndCheckStatus = `-- name: UpdatePosterUrlAndCheckStatus :exec
UPDATE "other_film_informations"
SET poster_url = $2, 
    status = CASE 
        WHEN trailer_url IS NOT NULL
            AND LENGTH(trailer_url) > 0 
            AND LENGTH($2::text) > 0 THEN 'success' 
        ELSE status
    END
WHERE "film_id" = $1
`

type UpdatePosterUrlAndCheckStatusParams struct {
	FilmID    int32       `json:"film_id"`
	PosterUrl pgtype.Text `json:"poster_url"`
}

func (q *Queries) UpdatePosterUrlAndCheckStatus(ctx context.Context, arg UpdatePosterUrlAndCheckStatusParams) error {
	_, err := q.db.Exec(ctx, updatePosterUrlAndCheckStatus, arg.FilmID, arg.PosterUrl)
	return err
}

const updateVideoUrlAndCheckStatus = `-- name: UpdateVideoUrlAndCheckStatus :exec
UPDATE "other_film_informations"
SET trailer_url = $2, 
    status = CASE 
        WHEN poster_url IS NOT NULL 
        AND LENGTH(poster_url) > 0
        AND LENGTH($2::text) > 0 THEN 'success' 
        ELSE status
    END
WHERE "film_id" = $1
`

type UpdateVideoUrlAndCheckStatusParams struct {
	FilmID     int32       `json:"film_id"`
	TrailerUrl pgtype.Text `json:"trailer_url"`
}

func (q *Queries) UpdateVideoUrlAndCheckStatus(ctx context.Context, arg UpdateVideoUrlAndCheckStatusParams) error {
	_, err := q.db.Exec(ctx, updateVideoUrlAndCheckStatus, arg.FilmID, arg.TrailerUrl)
	return err
}

const updateFilm = `-- name: updateFilm :exec
UPDATE films
SET 
    title = $2,
    description = $3,
    release_date = $4,
    duration = $5
WHERE id = $1
`

type updateFilmParams struct {
	ID          int32           `json:"id"`
	Title       string          `json:"title"`
	Description string          `json:"description"`
	ReleaseDate pgtype.Date     `json:"release_date"`
	Duration    pgtype.Interval `json:"duration"`
}

func (q *Queries) updateFilm(ctx context.Context, arg updateFilmParams) error {
	_, err := q.db.Exec(ctx, updateFilm,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.ReleaseDate,
		arg.Duration,
	)
	return err
}

const updateFilmChange = `-- name: updateFilmChange :exec
UPDATE fillm_changes
SET 
    changed_by = $2,
    updated_at = $3
WHERE film_id = $1
`

type updateFilmChangeParams struct {
	FilmID    int32            `json:"film_id"`
	ChangedBy string           `json:"changed_by"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) updateFilmChange(ctx context.Context, arg updateFilmChangeParams) error {
	_, err := q.db.Exec(ctx, updateFilmChange, arg.FilmID, arg.ChangedBy, arg.UpdatedAt)
	return err
}

const updateFilmInformation = `-- name: updateFilmInformation :exec
UPDATE other_film_informations
SET 
    status = $2,
    poster_url = $3,
    trailer_url = $4
WHERE film_id = $1
`

type updateFilmInformationParams struct {
	FilmID     int32        `json:"film_id"`
	Status     NullStatuses `json:"status"`
	PosterUrl  pgtype.Text  `json:"poster_url"`
	TrailerUrl pgtype.Text  `json:"trailer_url"`
}

func (q *Queries) updateFilmInformation(ctx context.Context, arg updateFilmInformationParams) error {
	_, err := q.db.Exec(ctx, updateFilmInformation,
		arg.FilmID,
		arg.Status,
		arg.PosterUrl,
		arg.TrailerUrl,
	)
	return err
}
