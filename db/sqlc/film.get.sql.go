// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: film.get.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllFilms = `-- name: GetAllFilms :many
SELECT 
    f.id, f.title, f.description, f.release_date, f.duration,
    ARRAY_AGG(DISTINCT fg.genre::text) AS genres,
    ofi.status, ofi.poster_url, ofi.trailer_url
FROM films AS f
LEFT JOIN other_film_informations AS ofi ON f.id = ofi.film_id
LEFT JOIN film_genres AS fg ON fg.film_id = f.id
GROUP BY 
    f.id, f.title, f.description, f.release_date, f.duration,
    ofi.status, ofi.poster_url, ofi.trailer_url
ORDER BY f.release_date DESC
`

type GetAllFilmsRow struct {
	ID          int32           `json:"id"`
	Title       string          `json:"title"`
	Description string          `json:"description"`
	ReleaseDate pgtype.Date     `json:"release_date"`
	Duration    pgtype.Interval `json:"duration"`
	Genres      interface{}     `json:"genres"`
	Status      NullStatuses    `json:"status"`
	PosterUrl   pgtype.Text     `json:"poster_url"`
	TrailerUrl  pgtype.Text     `json:"trailer_url"`
}

func (q *Queries) GetAllFilms(ctx context.Context) ([]GetAllFilmsRow, error) {
	rows, err := q.db.Query(ctx, getAllFilms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllFilmsRow{}
	for rows.Next() {
		var i GetAllFilmsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.ReleaseDate,
			&i.Duration,
			&i.Genres,
			&i.Status,
			&i.PosterUrl,
			&i.TrailerUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFilmById = `-- name: GetFilmById :one
SELECT 
    f.id,
    f.title,
    f.description,
    f.release_date,
    f.duration,

    ofi.status,
    ofi.poster_url,
    ofi.trailer_url,

    ARRAY_AGG(DISTINCT fg.genre::text) AS genres

FROM films AS f
LEFT JOIN other_film_informations ofi ON ofi.film_id = f.id
LEFT JOIN film_genres fg ON fg.film_id = f.id

WHERE f.id = $1

GROUP BY 
    f.id,
    ofi.status,
    ofi.poster_url,
    ofi.trailer_url
`

type GetFilmByIdRow struct {
	ID          int32           `json:"id"`
	Title       string          `json:"title"`
	Description string          `json:"description"`
	ReleaseDate pgtype.Date     `json:"release_date"`
	Duration    pgtype.Interval `json:"duration"`
	Status      NullStatuses    `json:"status"`
	PosterUrl   pgtype.Text     `json:"poster_url"`
	TrailerUrl  pgtype.Text     `json:"trailer_url"`
	Genres      interface{}     `json:"genres"`
}

func (q *Queries) GetFilmById(ctx context.Context, id int32) (GetFilmByIdRow, error) {
	row := q.db.QueryRow(ctx, getFilmById, id)
	var i GetFilmByIdRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.ReleaseDate,
		&i.Duration,
		&i.Status,
		&i.PosterUrl,
		&i.TrailerUrl,
		&i.Genres,
	)
	return i, err
}

const getFilmByTitle = `-- name: GetFilmByTitle :one
SELECT id, title, description, release_date, duration
FROM films
WHERE title = $1
`

func (q *Queries) GetFilmByTitle(ctx context.Context, title string) (Film, error) {
	row := q.db.QueryRow(ctx, getFilmByTitle, title)
	var i Film
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.ReleaseDate,
		&i.Duration,
	)
	return i, err
}

const getPosterUrlByFilmId = `-- name: GetPosterUrlByFilmId :one
SELECT poster_url
FROM other_film_informations
WHERE film_id = $1
`

func (q *Queries) GetPosterUrlByFilmId(ctx context.Context, filmID int32) (pgtype.Text, error) {
	row := q.db.QueryRow(ctx, getPosterUrlByFilmId, filmID)
	var poster_url pgtype.Text
	err := row.Scan(&poster_url)
	return poster_url, err
}

const getTrailerUrlByFilmId = `-- name: GetTrailerUrlByFilmId :one
SELECT trailer_url
FROM other_film_informations
WHERE film_id = $1
`

func (q *Queries) GetTrailerUrlByFilmId(ctx context.Context, filmID int32) (pgtype.Text, error) {
	row := q.db.QueryRow(ctx, getTrailerUrlByFilmId, filmID)
	var trailer_url pgtype.Text
	err := row.Scan(&trailer_url)
	return trailer_url, err
}

const isFilmExist = `-- name: IsFilmExist :one
SELECT EXISTS (
    SELECT 1 FROM films WHERE id = $1
) AS EXISTS
`

func (q *Queries) IsFilmExist(ctx context.Context, id int32) (bool, error) {
	row := q.db.QueryRow(ctx, isFilmExist, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
