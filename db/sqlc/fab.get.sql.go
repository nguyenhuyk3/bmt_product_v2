// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: fab.get.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getFABById = `-- name: GetFABById :one
SELECT id, name, type, image_url, price, is_deleted, created_at, updated_at FROM foods_and_beverages
WHERE id = $1
`

func (q *Queries) GetFABById(ctx context.Context, id int32) (FoodsAndBeverage, error) {
	row := q.db.QueryRow(ctx, getFABById, id)
	var i FoodsAndBeverage
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.ImageUrl,
		&i.Price,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFABImageURLByID = `-- name: GetFABImageURLByID :one
SELECT image_url
FROM foods_and_beverages
WHERE id = $1
`

func (q *Queries) GetFABImageURLByID(ctx context.Context, id int32) (pgtype.Text, error) {
	row := q.db.QueryRow(ctx, getFABImageURLByID, id)
	var image_url pgtype.Text
	err := row.Scan(&image_url)
	return image_url, err
}

const isFABExist = `-- name: IsFABExist :one
SELECT EXISTS (
    SELECT 1 FROM foods_and_beverages WHERE id = $1
) AS EXISTS
`

func (q *Queries) IsFABExist(ctx context.Context, id int32) (bool, error) {
	row := q.db.QueryRow(ctx, isFABExist, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const listFAB = `-- name: ListFAB :many
SELECT id, name, type, image_url, price, is_deleted, created_at, updated_at FROM foods_and_beverages
ORDER BY created_at DESC
`

func (q *Queries) ListFAB(ctx context.Context) ([]FoodsAndBeverage, error) {
	rows, err := q.db.Query(ctx, listFAB)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FoodsAndBeverage{}
	for rows.Next() {
		var i FoodsAndBeverage
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.ImageUrl,
			&i.Price,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
