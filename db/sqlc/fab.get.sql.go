// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: fab.get.sql

package sqlc

import (
	"context"
)

const getFABById = `-- name: GetFABById :one
SELECT id, name, type, image_url, price, is_deleted, created_at, updated_at FROM food_and_beverage
WHERE id = $1
`

func (q *Queries) GetFABById(ctx context.Context, id int32) (FoodAndBeverage, error) {
	row := q.db.QueryRow(ctx, getFABById, id)
	var i FoodAndBeverage
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.ImageUrl,
		&i.Price,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listFAB = `-- name: ListFAB :many
SELECT id, name, type, image_url, price, is_deleted, created_at, updated_at FROM food_and_beverage
ORDER BY created_at DESC
`

func (q *Queries) ListFAB(ctx context.Context) ([]FoodAndBeverage, error) {
	rows, err := q.db.Query(ctx, listFAB)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FoodAndBeverage{}
	for rows.Next() {
		var i FoodAndBeverage
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.ImageUrl,
			&i.Price,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
