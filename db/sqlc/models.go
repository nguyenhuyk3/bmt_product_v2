// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type FabTypes string

const (
	FabTypesFood     FabTypes = "food"
	FabTypesBeverage FabTypes = "beverage"
)

func (e *FabTypes) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = FabTypes(s)
	case string:
		*e = FabTypes(s)
	default:
		return fmt.Errorf("unsupported scan type for FabTypes: %T", src)
	}
	return nil
}

type NullFabTypes struct {
	FabTypes FabTypes `json:"fab_types"`
	Valid    bool     `json:"valid"` // Valid is true if FabTypes is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFabTypes) Scan(value interface{}) error {
	if value == nil {
		ns.FabTypes, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.FabTypes.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFabTypes) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.FabTypes), nil
}

type Genres string

const (
	GenresAction                Genres = "action"
	GenresAdventure             Genres = "adventure"
	GenresAnimation             Genres = "animation"
	GenresComedy                Genres = "comedy"
	GenresCrime                 Genres = "crime"
	GenresDrama                 Genres = "drama"
	GenresFantasy               Genres = "fantasy"
	GenresHistorical            Genres = "historical"
	GenresHorror                Genres = "horror"
	GenresMystery               Genres = "mystery"
	GenresRomance               Genres = "romance"
	GenresSciFi                 Genres = "sci_fi"
	GenresThriller              Genres = "thriller"
	GenresWar                   Genres = "war"
	GenresWestern               Genres = "western"
	GenresDarkComedy            Genres = "dark_comedy"
	GenresDocumentary           Genres = "documentary"
	GenresMusical               Genres = "musical"
	GenresSports                Genres = "sports"
	GenresSuperhero             Genres = "superhero"
	GenresPsychologicalThriller Genres = "psychological_thriller"
	GenresSlasher               Genres = "slasher"
	GenresBiopic                Genres = "biopic"
	GenresNoir                  Genres = "noir"
	GenresFamily                Genres = "family"
)

func (e *Genres) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Genres(s)
	case string:
		*e = Genres(s)
	default:
		return fmt.Errorf("unsupported scan type for Genres: %T", src)
	}
	return nil
}

type NullGenres struct {
	Genres Genres `json:"genres"`
	Valid  bool   `json:"valid"` // Valid is true if Genres is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGenres) Scan(value interface{}) error {
	if value == nil {
		ns.Genres, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Genres.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGenres) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Genres), nil
}

type Languages string

const (
	LanguagesVietnamese Languages = "vietnamese"
	LanguagesEnglish    Languages = "english"
)

func (e *Languages) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Languages(s)
	case string:
		*e = Languages(s)
	default:
		return fmt.Errorf("unsupported scan type for Languages: %T", src)
	}
	return nil
}

type NullLanguages struct {
	Languages Languages `json:"languages"`
	Valid     bool      `json:"valid"` // Valid is true if Languages is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullLanguages) Scan(value interface{}) error {
	if value == nil {
		ns.Languages, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Languages.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullLanguages) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Languages), nil
}

type Statuses string

const (
	StatusesFailed  Statuses = "failed"
	StatusesPending Statuses = "pending"
	StatusesSuccess Statuses = "success"
)

func (e *Statuses) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Statuses(s)
	case string:
		*e = Statuses(s)
	default:
		return fmt.Errorf("unsupported scan type for Statuses: %T", src)
	}
	return nil
}

type NullStatuses struct {
	Statuses Statuses `json:"statuses"`
	Valid    bool     `json:"valid"` // Valid is true if Statuses is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStatuses) Scan(value interface{}) error {
	if value == nil {
		ns.Statuses, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Statuses.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStatuses) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Statuses), nil
}

type FillmChanges struct {
	FilmID    int32            `json:"film_id"`
	ChangedBy string           `json:"changed_by"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

type FilmGenres struct {
	FilmID pgtype.Int4 `json:"film_id"`
	Genre  NullGenres  `json:"genre"`
}

type Films struct {
	ID          int32           `json:"id"`
	Title       string          `json:"title"`
	Description string          `json:"description"`
	ReleaseDate pgtype.Date     `json:"release_date"`
	Duration    pgtype.Interval `json:"duration"`
}

type FoodAndBeverage struct {
	ID        int32            `json:"id"`
	Name      string           `json:"name"`
	Type      FabTypes         `json:"type"`
	ImageUrl  pgtype.Text      `json:"image_url"`
	Price     int32            `json:"price"`
	IsDeleted bool             `json:"is_deleted"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

type OtherFilmInformations struct {
	FilmID     int32        `json:"film_id"`
	Status     NullStatuses `json:"status"`
	PosterUrl  pgtype.Text  `json:"poster_url"`
	TrailerUrl pgtype.Text  `json:"trailer_url"`
}
